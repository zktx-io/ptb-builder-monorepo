@tailwind base;
@tailwind components;
@tailwind utilities;

/* ============================================================
   PTB THEME: CSS VARIABLES
   - Borders are opaque (no alpha).
   - Backgrounds keep alpha to show layering.
   - Brightness order: normal < hover < active.
   ============================================================ */

/* Light (default theme) */
:root {
  /* Flow (command → command) */
  --ptb-flow-stroke: #9ca3af; /* gray-400 */
  --ptb-flow-width: 2.75;
  --ptb-flow-dash: 5 5;

  /* IO edge colors by category (normal) */
  --ptb-io-address-stroke: #f59e0b; /* amber-500 */
  --ptb-io-address-width: 2.5;
  --ptb-io-number-stroke:  #ef4444; /* red-500 */
  --ptb-io-number-width: 2.5;
  --ptb-io-bool-stroke:    #8b5cf6; /* violet-500 */
  --ptb-io-bool-width: 2.5;
  --ptb-io-string-stroke:  #10b981; /* emerald-500 */
  --ptb-io-string-width: 2.5;
  --ptb-io-object-stroke:  #3b82f6; /* blue-500 */
  --ptb-io-object-width: 2.5;
  --ptb-io-unknown-stroke: #737373; /* gray-500 */
  --ptb-io-unknown-width: 2;
  --ptb-io-unknown-dash: 4 4;

  /* IO edge colors (selected/active = brighter) */
  --ptb-io-address-stroke-active: #fbbf24; /* amber-400 */
  --ptb-io-number-stroke-active:  #f87171; /* red-400 */
  --ptb-io-bool-stroke-active:    #a78bfa; /* violet-400 */
  --ptb-io-string-stroke-active:  #34d399; /* emerald-400 */
  --ptb-io-object-stroke-active:  #60a5fa; /* blue-400 */
  --ptb-io-unknown-stroke-active: #a3a3a3; /* gray-400 */

  /* =======================
     Node surfaces (border/bg)
     Normal = darkest
     Hover  = brighter
     Active = brightest
     Borders are opaque; BG uses alpha.
     ======================= */

  /* Command (gray) */
  --ptb-node-command-border:        #4b5563; /* gray-600 (normal) */
  --ptb-node-command-bg:            rgba(209,213,219,0.60); /* gray-300 */
  --ptb-node-command-border-hover:  #6b7280; /* gray-500 */
  --ptb-node-command-bg-hover:      rgba(209,213,219,0.75);
  --ptb-node-command-border-active: #9ca3af; /* gray-400 */
  --ptb-node-command-bg-active:     rgba(209,213,219,0.90);

  /* Address (amber) */
  --ptb-node-address-border:        #b45309; /* amber-700 */
  --ptb-node-address-bg:            rgba(253,230,138,0.60); /* amber-200 */
  --ptb-node-address-border-hover:  #f59e0b; /* amber-500 */
  --ptb-node-address-bg-hover:      rgba(253,230,138,0.75);
  --ptb-node-address-border-active: #fbbf24; /* amber-400 */
  --ptb-node-address-bg-active:     rgba(253,230,138,0.90);

  /* Number (red) */
  --ptb-node-number-border:         #b91c1c; /* red-700 */
  --ptb-node-number-bg:             rgba(252,165,165,0.60); /* red-300 */
  --ptb-node-number-border-hover:   #ef4444; /* red-500 */
  --ptb-node-number-bg-hover:       rgba(252,165,165,0.75);
  --ptb-node-number-border-active:  #f87171; /* red-400 */
  --ptb-node-number-bg-active:      rgba(252,165,165,0.90);

  /* Bool (violet) */
  --ptb-node-bool-border:           #6d28d9; /* violet-700 */
  --ptb-node-bool-bg:               rgba(196,181,253,0.60); /* violet-300 */
  --ptb-node-bool-border-hover:     #8b5cf6; /* violet-500 */
  --ptb-node-bool-bg-hover:         rgba(196,181,253,0.75);
  --ptb-node-bool-border-active:    #a78bfa; /* violet-400 */
  --ptb-node-bool-bg-active:        rgba(196,181,253,0.90);

  /* String (emerald) */
  --ptb-node-string-border:         #047857; /* emerald-700 */
  --ptb-node-string-bg:             rgba(134,239,172,0.60); /* emerald-300 */
  --ptb-node-string-border-hover:   #10b981; /* emerald-500 */
  --ptb-node-string-bg-hover:       rgba(134,239,172,0.75);
  --ptb-node-string-border-active:  #34d399; /* emerald-400 */
  --ptb-node-string-bg-active:      rgba(134,239,172,0.90);

  /* Object (blue) */
  --ptb-node-object-border:         #1d4ed8; /* blue-700 */
  --ptb-node-object-bg:             rgba(147,197,253,0.60); /* blue-300 */
  --ptb-node-object-border-hover:   #3b82f6; /* blue-500 */
  --ptb-node-object-bg-hover:       rgba(147,197,253,0.75);
  --ptb-node-object-border-active:  #60a5fa; /* blue-400 */
  --ptb-node-object-bg-active:      rgba(147,197,253,0.90);

  /* Unknown (gray neutral) */
  --ptb-node-unknown-border:        #525252; /* gray-600 */
  --ptb-node-unknown-bg:            rgba(163,163,163,0.60); /* gray-400 */
  --ptb-node-unknown-border-hover:  #737373; /* gray-500 */
  --ptb-node-unknown-bg-hover:      rgba(163,163,163,0.75);
  --ptb-node-unknown-border-active: #a3a3a3; /* gray-400 */
  --ptb-node-unknown-bg-active:     rgba(163,163,163,0.90);
}

/* Dark theme (opaque borders, alpha BGs) */
.dark {
  --ptb-flow-stroke: #374151; /* gray-700 */
  --ptb-io-unknown-stroke: #a3a3a3;

  /* IO edge colors (normal, tuned for dark background) */
  --ptb-io-address-stroke: #d97706; /* amber-600 */
  --ptb-io-number-stroke:  #dc2626; /* red-600 */
  --ptb-io-bool-stroke:    #7c3aed; /* violet-600 */
  --ptb-io-string-stroke:  #059669; /* emerald-600 */
  --ptb-io-object-stroke:  #2563eb; /* blue-600 */
  --ptb-io-unknown-stroke: #737373; /* gray-500 */

  /* IO edge colors (selected/active = brighter, tuned for dark) */
  --ptb-io-address-stroke-active: #f59e0b; /* amber-500 */
  --ptb-io-number-stroke-active:  #ef4444; /* red-500 */
  --ptb-io-bool-stroke-active:    #8b5cf6; /* violet-500 */
  --ptb-io-string-stroke-active:  #10b981; /* emerald-500 */
  --ptb-io-object-stroke-active:  #3b82f6; /* blue-500 */
  --ptb-io-unknown-stroke-active: #d4d4d4; /* gray-300 */

  /* Command */
  --ptb-node-command-border:        #1f2937; /* gray-800 */
  --ptb-node-command-bg:            rgba(31,41,55,0.60);
  --ptb-node-command-border-hover:  #374151; /* gray-700 */
  --ptb-node-command-bg-hover:      rgba(31,41,55,0.75);
  --ptb-node-command-border-active: #9ca3af; /* gray-400 */
  --ptb-node-command-bg-active:     rgba(31,41,55,0.95);

  /* Address */
  --ptb-node-address-border:        #92400e; /* amber-800 */
  --ptb-node-address-bg:            rgba(245,158,11,0.22);
  --ptb-node-address-border-hover:  #f59e0b; /* amber-500 */
  --ptb-node-address-bg-hover:      rgba(245,158,11,0.35);
  --ptb-node-address-border-active: #fbbf24; /* amber-400 */
  --ptb-node-address-bg-active:     rgba(245,158,11,0.48);

  /* Number */
  --ptb-node-number-border:         #7f1d1d; /* red-900 */
  --ptb-node-number-bg:             rgba(248,113,113,0.22);
  --ptb-node-number-border-hover:   #ef4444; /* red-500 */
  --ptb-node-number-bg-hover:       rgba(248,113,113,0.35);
  --ptb-node-number-border-active:  #f87171; /* red-400 */
  --ptb-node-number-bg-active:      rgba(248,113,113,0.48);

  /* Bool */
  --ptb-node-bool-border:           #5b21b6; /* violet-800 */
  --ptb-node-bool-bg:               rgba(167,139,250,0.22);
  --ptb-node-bool-border-hover:     #8b5cf6; /* violet-500 */
  --ptb-node-bool-bg-hover:         rgba(167,139,250,0.35);
  --ptb-node-bool-border-active:    #a78bfa; /* violet-400 */
  --ptb-node-bool-bg-active:        rgba(167,139,250,0.48);

  /* String */
  --ptb-node-string-border:         #065f46; /* emerald-800 */
  --ptb-node-string-bg:             rgba(16,185,129,0.22);
  --ptb-node-string-border-hover:   #10b981; /* emerald-500 */
  --ptb-node-string-bg-hover:       rgba(16,185,129,0.35);
  --ptb-node-string-border-active:  #34d399; /* emerald-400 */
  --ptb-node-string-bg-active:      rgba(16,185,129,0.48);

  /* Object */
  --ptb-node-object-border:         #1e3a8a; /* blue-900 */
  --ptb-node-object-bg:             rgba(59,130,246,0.22);
  --ptb-node-object-border-hover:   #3b82f6; /* blue-500 */
  --ptb-node-object-bg-hover:       rgba(59,130,246,0.35);
  --ptb-node-object-border-active:  #60a5fa; /* blue-400 */
  --ptb-node-object-bg-active:      rgba(59,130,246,0.48);

  /* Unknown */
  --ptb-node-unknown-border:        #404040; /* gray-700 */
  --ptb-node-unknown-bg:            rgba(163,163,163,0.22);
  --ptb-node-unknown-border-hover:  #737373; /* gray-500 */
  --ptb-node-unknown-bg-hover:      rgba(163,163,163,0.35);
  --ptb-node-unknown-border-active: #d4d4d4; /* gray-300 */
  --ptb-node-unknown-bg-active:     rgba(163,163,163,0.48);
}

/* ============================================================
   EDGE STYLES
   ============================================================ */

@keyframes ptb-flow-dash { to { stroke-dashoffset: -50; } }

.ptb-flow-edge {
  stroke: var(--ptb-flow-stroke);
  stroke-width: var(--ptb-flow-width);
  stroke-dasharray: var(--ptb-flow-dash);
  fill: none;
  vector-effect: non-scaling-stroke;
  transform: translateZ(0);
  stroke-opacity: 1;
  will-change: stroke-dashoffset;
}

.ptb-flow-active .ptb-flow-edge { animation: ptb-flow-dash 1.8s linear infinite; }
.ptb-flow-edge.is-selected { filter: drop-shadow(0 0 2px rgba(0,0,0,0.25)); }

/* IO edge: solid, no dash/animation. 
   We set XYFlow edge stroke variables here so XYFlow's selected rule uses our colors. */
.ptb-io-edge {
  stroke-dasharray: none !important;
  animation: none !important;
  stroke-linecap: round;
  stroke-linejoin: round;
  stroke-opacity: 1;

  /* Safe defaults (in case category didn’t set them) */
  --xy-edge-stroke: var(--ptb-io-unknown-stroke);
  --xy-edge-stroke-selected: var(--ptb-io-unknown-stroke-active);
}

/* Category → set stroke variables and width */
.ptb-io-edge--address {
  --xy-edge-stroke: var(--ptb-io-address-stroke);
  --xy-edge-stroke-selected: var(--ptb-io-address-stroke-active);
  stroke-width: var(--ptb-io-address-width);
}
.ptb-io-edge--number  {
  --xy-edge-stroke: var(--ptb-io-number-stroke);
  --xy-edge-stroke-selected: var(--ptb-io-number-stroke-active);
  stroke-width: var(--ptb-io-number-width);
}
.ptb-io-edge--bool    {
  --xy-edge-stroke: var(--ptb-io-bool-stroke);
  --xy-edge-stroke-selected: var(--ptb-io-bool-stroke-active);
  stroke-width: var(--ptb-io-bool-width);
}
.ptb-io-edge--string  {
  --xy-edge-stroke: var(--ptb-io-string-stroke);
  --xy-edge-stroke-selected: var(--ptb-io-string-stroke-active);
  stroke-width: var(--ptb-io-string-width);
}
.ptb-io-edge--object  {
  --xy-edge-stroke: var(--ptb-io-object-stroke);
  --xy-edge-stroke-selected: var(--ptb-io-object-stroke-active);
  stroke-width: var(--ptb-io-object-width);
}
.ptb-io-edge--unknown {
  --xy-edge-stroke: var(--ptb-io-unknown-stroke);
  --xy-edge-stroke-selected: var(--ptb-io-unknown-stroke-active);
  stroke-width: var(--ptb-io-unknown-width);
  stroke-dasharray: var(--ptb-io-unknown-dash);
}

/* Ensure base state uses our variable even on older XYFlow builds */
.react-flow__edge .react-flow__edge-path.ptb-io-edge {
  stroke: var(--xy-edge-stroke);
}

/* Hover brighten (falls back to selected if no hover var is provided) */
.react-flow__edge:hover .react-flow__edge-path.ptb-io-edge {
  stroke: var(--xy-edge-stroke-hover, var(--xy-edge-stroke-selected));
}

/* Keep pointer affordance and hit-test behavior */
.react-flow__edge, .react-flow__edge-path { cursor: pointer; }
.react-flow__edge-path { pointer-events: stroke; }

/* ============================================================
   NODE STYLES
   ============================================================ */

.ptb-node-shell {
  position: relative;
  border-width: 2px;
  z-index: 0;
  transition: border-color 0.15s ease, background-color 0.15s ease;
  will-change: border-color, background-color;
}

/* Remove default shadow; keep ring */
.react-flow__node.dragging .ptb-node-shell,
.react-flow__node.selected .ptb-node-shell { box-shadow: none; }

.react-flow__node.dragging .ptb-node-shell::after,
.react-flow__node.selected  .ptb-node-shell::after {
  content: "";
  position: absolute;
  inset: -2px;
  border: 2px solid var(--ptb-active-ring, transparent);
  border-radius: inherit;
  pointer-events: none;
  z-index: 0;
}

/* Active ring color per type */
.ptb-node--command { --ptb-active-ring: var(--ptb-node-command-border-active); }
.ptb-node--address { --ptb-active-ring: var(--ptb-node-address-border-active); }
.ptb-node--number  { --ptb-active-ring: var(--ptb-node-number-border-active); }
.ptb-node--bool    { --ptb-active-ring: var(--ptb-node-bool-border-active); }
.ptb-node--string  { --ptb-active-ring: var(--ptb-node-string-border-active); }
.ptb-node--object  { --ptb-active-ring: var(--ptb-node-object-border-active); }
.ptb-node--unknown { --ptb-active-ring: var(--ptb-node-unknown-border-active); }

/* Base (Normal) surfaces per type */
.ptb-node--command .ptb-node-shell { border-color: var(--ptb-node-command-border); background: var(--ptb-node-command-bg); }
.ptb-node--address .ptb-node-shell { border-color: var(--ptb-node-address-border); background: var(--ptb-node-address-bg); }
.ptb-node--number  .ptb-node-shell { border-color: var(--ptb-node-number-border);  background: var(--ptb-node-number-bg); }
.ptb-node--bool    .ptb-node-shell { border-color: var(--ptb-node-bool-border);    background: var(--ptb-node-bool-bg); }
.ptb-node--string  .ptb-node-shell { border-color: var(--ptb-node-string-border);  background: var(--ptb-node-string-bg); }
.ptb-node--object  .ptb-node-shell { border-color: var(--ptb-node-object-border);  background: var(--ptb-node-object-bg); }
.ptb-node--unknown .ptb-node-shell { border-color: var(--ptb-node-unknown-border); background: var(--ptb-node-unknown-bg); }

/* Hover (brighter) */
.react-flow__node:has(.ptb-node--command):hover .ptb-node-shell { border-color: var(--ptb-node-command-border-hover); background: var(--ptb-node-command-bg-hover); }
.react-flow__node:has(.ptb-node--address):hover .ptb-node-shell { border-color: var(--ptb-node-address-border-hover); background: var(--ptb-node-address-bg-hover); }
.react-flow__node:has(.ptb-node--number):hover  .ptb-node-shell { border-color: var(--ptb-node-number-border-hover);  background: var(--ptb-node-number-bg-hover); }
.react-flow__node:has(.ptb-node--bool):hover    .ptb-node-shell { border-color: var(--ptb-node-bool-border-hover);    background: var(--ptb-node-bool-bg-hover); }
.react-flow__node:has(.ptb-node--string):hover  .ptb-node-shell { border-color: var(--ptb-node-string-border-hover);  background: var(--ptb-node-string-bg-hover); }
.react-flow__node:has(.ptb-node--object):hover  .ptb-node-shell { border-color: var(--ptb-node-object-border-hover);  background: var(--ptb-node-object-bg-hover); }
.react-flow__node:has(.ptb-node--unknown):hover .ptb-node-shell { border-color: var(--ptb-node-unknown-border-hover); background: var(--ptb-node-unknown-bg-hover); }

/* Selected/Active (brightest) */
.react-flow__node.selected:has(.ptb-node--command) .ptb-node-shell { border-color: var(--ptb-node-command-border-active); background: var(--ptb-node-command-bg-active); }
.react-flow__node.selected:has(.ptb-node--address) .ptb-node-shell { border-color: var(--ptb-node-address-border-active); background: var(--ptb-node-address-bg-active); }
.react-flow__node.selected:has(.ptb-node--number)  .ptb-node-shell { border-color: var(--ptb-node-number-border-active);  background: var(--ptb-node-number-bg-active); }
.react-flow__node.selected:has(.ptb-node--bool)    .ptb-node-shell { border-color: var(--ptb-node-bool-border-active);    background: var(--ptb-node-bool-bg-active); }
.react-flow__node.selected:has(.ptb-node--string)  .ptb-node-shell { border-color: var(--ptb-node-string-border-active);  background: var(--ptb-node-string-bg-active); }
.react-flow__node.selected:has(.ptb-node--object)  .ptb-node-shell { border-color: var(--ptb-node-object-border-active);  background: var(--ptb-node-object-bg-active); }
.react-flow__node.selected:has(.ptb-node--unknown) .ptb-node-shell { border-color: var(--ptb-node-unknown-border-active); background: var(--ptb-node-unknown-bg-active); }

/* ============================================================
   HANDLE STYLES
   - Handles mirror node border color (normal/hover/active).
   - Use currentColor so outline and fill match the node border.
   ============================================================ */

.ptb-handle {
  width: 12px;
  height: 12px;
  border: 2px solid currentColor;   /* outline = currentColor */
  background-color: currentColor;   /* fill    = currentColor */
  box-sizing: border-box;
  box-shadow: 0 0 0 1px rgba(0,0,0,.15);
  z-index: 2;
  pointer-events: all;
  color: inherit;                   /* color is inherited from node state */
}

.ptb-handle--flow { width: 14px; height: 14px; }

/* Shapes */
.ptb-handle--single { border-radius: 9999px; } /* circle */
.ptb-handle--array  { border-radius: 4px; }    /* rounded square */
.ptb-handle--vector {
  width: 12px;
  height: 12px;
  border-radius: 2px;
  transform-origin: center center;
}
.ptb-handle--vector.ptb-handle--flow { width: 16px; height: 16px; }

/* Vector alignment for left/right */
.react-flow__handle-right.ptb-handle--vector {
  transform: translate(calc(50% + 1px), -50%) rotate(45deg);
}
.react-flow__handle-left.ptb-handle--vector {
  transform: translate(calc(-50% - 1px), -50%) rotate(45deg);
}
.react-flow__handle-right.ptb-handle--vector.ptb-handle--flow {
  transform: translate(calc(50% + 1px), -50%) rotate(45deg);
}
.react-flow__handle-left.ptb-handle--vector.ptb-handle--flow {
  transform: translate(calc(-50% - 1px), -50%) rotate(45deg);
}

/* Handle color sync with node border (Normal / Hover / Active) */
.react-flow__node:has(.ptb-node--command) .ptb-handle--io { color: var(--ptb-node-command-border); }
.react-flow__node:has(.ptb-node--address) .ptb-handle--io { color: var(--ptb-node-address-border); }
.react-flow__node:has(.ptb-node--number)  .ptb-handle--io { color: var(--ptb-node-number-border);  }
.react-flow__node:has(.ptb-node--bool)    .ptb-handle--io { color: var(--ptb-node-bool-border);    }
.react-flow__node:has(.ptb-node--string)  .ptb-handle--io { color: var(--ptb-node-string-border);  }
.react-flow__node:has(.ptb-node--object)  .ptb-handle--io { color: var(--ptb-node-object-border);  }
.react-flow__node:has(.ptb-node--unknown) .ptb-handle--io { color: var(--ptb-node-unknown-border); }

/* Hover */
.react-flow__node:has(.ptb-node--command):hover .ptb-handle--io { color: var(--ptb-node-command-border-hover); }
.react-flow__node:has(.ptb-node--address):hover .ptb-handle--io { color: var(--ptb-node-address-border-hover); }
.react-flow__node:has(.ptb-node--number):hover  .ptb-handle--io { color: var(--ptb-node-number-border-hover);  }
.react-flow__node:has(.ptb-node--bool):hover    .ptb-handle--io { color: var(--ptb-node-bool-border-hover);    }
.react-flow__node:has(.ptb-node--string):hover  .ptb-handle--io { color: var(--ptb-node-string-border-hover);  }
.react-flow__node:has(.ptb-node--object):hover  .ptb-handle--io { color: var(--ptb-node-object-border-hover);  }
.react-flow__node:has(.ptb-node--unknown):hover .ptb-handle--io { color: var(--ptb-node-unknown-border-hover); }

/* Selected */
.react-flow__node.selected:has(.ptb-node--command) .ptb-handle--io { color: var(--ptb-node-command-border-active); }
.react-flow__node.selected:has(.ptb-node--address) .ptb-handle--io { color: var(--ptb-node-address-border-active); }
.react-flow__node.selected:has(.ptb-node--number)  .ptb-handle--io { color: var(--ptb-node-number-border-active);  }
.react-flow__node.selected:has(.ptb-node--bool)    .ptb-handle--io { color: var(--ptb-node-bool-border-active);    }
.react-flow__node.selected:has(.ptb-node--string)  .ptb-handle--io { color: var(--ptb-node-string-border-active);  }
.react-flow__node.selected:has(.ptb-node--object)  .ptb-handle--io { color: var(--ptb-node-object-border-active);  }
.react-flow__node.selected:has(.ptb-node--unknown) .ptb-handle--io { color: var(--ptb-node-unknown-border-active); }

/* Flow handles (command nodes) also follow states */
.react-flow__node:has(.ptb-node--command) .ptb-handle--flow { color: var(--ptb-node-command-border); }
.react-flow__node:has(.ptb-node--command):hover .ptb-handle--flow { color: var(--ptb-node-command-border-hover); }
.react-flow__node.selected:has(.ptb-node--command) .ptb-handle--flow { color: var(--ptb-node-command-border-active); }

/* Hover affordance on handles */
.react-flow__handle:hover,
.ptb-handle:hover { filter: brightness(1.05); }