@tailwind base;
@tailwind components;
@tailwind utilities;

/* ============================================================
   PTB THEME: CSS VARIABLES
   ============================================================ */

/* Light (default) */
:root {
  /* Flow (command → command) */
  --ptb-flow-stroke: #9ca3af; /* gray-400 */
  --ptb-flow-width: 2.75;
  --ptb-flow-dash: 5 5;

  /* IO edges by category */
  --ptb-io-address-stroke: #f59e0b; /* amber-500 */
  --ptb-io-address-width: 2.5;

  --ptb-io-number-stroke: #ef4444; /* red-500 */
  --ptb-io-number-width: 2.5;

  --ptb-io-bool-stroke: #8b5cf6; /* violet-500 */
  --ptb-io-bool-width: 2.5;

  --ptb-io-string-stroke: #10b981; /* emerald-500 */
  --ptb-io-string-width: 2.5;

  --ptb-io-object-stroke: #3b82f6; /* blue-500 */
  --ptb-io-object-width: 2.5;

  --ptb-io-unknown-stroke: #737373; /* gray-500 */
  --ptb-io-unknown-width: 2;
  --ptb-io-unknown-dash: 4 4;

  /* Node base surface (border + background) */
  --ptb-node-command-border: #9ca3af;
  --ptb-node-command-bg: rgba(209, 213, 219, 0.6);

  --ptb-node-address-border: #fde68a;
  --ptb-node-address-bg: rgba(253, 230, 138, 0.6);

  --ptb-node-number-border: #fca5a5;
  --ptb-node-number-bg: rgba(252, 165, 165, 0.6);

  --ptb-node-bool-border: #c4b5fd;
  --ptb-node-bool-bg: rgba(196, 181, 253, 0.6);

  --ptb-node-string-border: #86efac;
  --ptb-node-string-bg: rgba(134, 239, 172, 0.6);

  --ptb-node-object-border: #93c5fd;
  --ptb-node-object-bg: rgba(147, 197, 253, 0.6);

  --ptb-node-unknown-border: #a3a3a3;
  --ptb-node-unknown-bg: rgba(163, 163, 163, 0.6);

  /* Hover/Active (light) */
  --ptb-node-command-border-hover: #6b7280;
  --ptb-node-command-bg-hover: rgba(209, 213, 219, 0.75);
  --ptb-node-command-border-active: #4b5563;
  --ptb-node-command-bg-active: rgba(209, 213, 219, 0.9);

  --ptb-node-address-border-hover: #f59e0b;
  --ptb-node-address-bg-hover: rgba(253, 230, 138, 0.75);
  --ptb-node-address-border-active: #d97706;
  --ptb-node-address-bg-active: rgba(253, 230, 138, 0.9);

  --ptb-node-number-border-hover: #ef4444;
  --ptb-node-number-bg-hover: rgba(252, 165, 165, 0.75);
  --ptb-node-number-border-active: #dc2626;
  --ptb-node-number-bg-active: rgba(252, 165, 165, 0.9);

  --ptb-node-bool-border-hover: #8b5cf6;
  --ptb-node-bool-bg-hover: rgba(196, 181, 253, 0.75);
  --ptb-node-bool-border-active: #7c3aed;
  --ptb-node-bool-bg-active: rgba(196, 181, 253, 0.9);

  --ptb-node-string-border-hover: #10b981;
  --ptb-node-string-bg-hover: rgba(134, 239, 172, 0.75);
  --ptb-node-string-border-active: #059669;
  --ptb-node-string-bg-active: rgba(134, 239, 172, 0.9);

  --ptb-node-object-border-hover: #3b82f6;
  --ptb-node-object-bg-hover: rgba(147, 197, 253, 0.75);
  --ptb-node-object-border-active: #2563eb;
  --ptb-node-object-bg-active: rgba(147, 197, 253, 0.9);

  --ptb-node-unknown-border-hover: #737373;
  --ptb-node-unknown-bg-hover: rgba(163, 163, 163, 0.75);
  --ptb-node-unknown-border-active: #525252;
  --ptb-node-unknown-bg-active: rgba(163, 163, 163, 0.9);
}

/* Dark overrides */
.dark {
  --ptb-flow-stroke: #374151;

  --ptb-io-unknown-stroke: #a3a3a3;

  --ptb-node-command-border: #374151;
  --ptb-node-command-bg: rgba(31, 41, 55, 0.6);

  --ptb-node-address-border: #f59e0b66;
  --ptb-node-address-bg: #f59e0b33;

  --ptb-node-number-border: #ef444466;
  --ptb-node-number-bg: #ef444433;

  --ptb-node-bool-border: #8b5cf666;
  --ptb-node-bool-bg: #8b5cf633;

  --ptb-node-string-border: #10b98166;
  --ptb-node-string-bg: #10b98133;

  --ptb-node-object-border: #3b82f666;
  --ptb-node-object-bg: #3b82f633;

  --ptb-node-command-border-hover: #6b7280;
  --ptb-node-command-bg-hover: rgba(31, 41, 55, 0.75);
  --ptb-node-command-border-active: #9ca3af;
  --ptb-node-command-bg-active: rgba(31, 41, 55, 0.95);

  --ptb-node-address-border-hover: #f59e0b99;
  --ptb-node-address-bg-hover: #f59e0b55;
  --ptb-node-address-border-active: #f59e0bcc;
  --ptb-node-address-bg-active: #f59e0b77;

  --ptb-node-number-border-hover: #ef444499;
  --ptb-node-number-bg-hover: #ef444455;
  --ptb-node-number-border-active: #ef4444cc;
  --ptb-node-number-bg-active: #ef444477;

  --ptb-node-bool-border-hover: #8b5cf699;
  --ptb-node-bool-bg-hover: #8b5cf655;
  --ptb-node-bool-border-active: #8b5cf6cc;
  --ptb-node-bool-bg-active: #8b5cf677;

  --ptb-node-string-border-hover: #10b98199;
  --ptb-node-string-bg-hover: #10b98155;
  --ptb-node-string-border-active: #10b981cc;
  --ptb-node-string-bg-active: #10b98177;

  --ptb-node-object-border-hover: #3b82f699;
  --ptb-node-object-bg-hover: #3b82f655;
  --ptb-node-object-border-active: #3b82f6cc;
  --ptb-node-object-bg-active: #3b82f677;

  --ptb-node-unknown-border-hover: #a3a3a3;
  --ptb-node-unknown-bg-hover: #a3a3a355;
  --ptb-node-unknown-border-active: #d4d4d4;
  --ptb-node-unknown-bg-active: #a3a3a377;
}

/* ============================================================
   EDGE STYLES
   ============================================================ */

@keyframes ptb-flow-dash { to { stroke-dashoffset: -50; } }

.ptb-flow-edge {
  stroke: var(--ptb-flow-stroke);
  stroke-width: var(--ptb-flow-width);
  stroke-dasharray: var(--ptb-flow-dash);
  animation: none;
  will-change: stroke-dashoffset;
  transform: translateZ(0);
  fill: none;
  vector-effect: non-scaling-stroke;
  stroke-opacity: 1;
}

/* Global flow animation toggle */
.ptb-flow-active .ptb-flow-edge {
  animation: ptb-flow-dash 1.8s linear infinite;
}

.ptb-flow-edge.is-selected {
  filter: drop-shadow(0 0 2px rgba(0, 0, 0, 0.25));
}

/* IO edge categories */
.ptb-io-edge--address { stroke: var(--ptb-io-address-stroke); stroke-width: var(--ptb-io-address-width); }
.ptb-io-edge--number  { stroke: var(--ptb-io-number-stroke);  stroke-width: var(--ptb-io-number-width); }
.ptb-io-edge--bool    { stroke: var(--ptb-io-bool-stroke);    stroke-width: var(--ptb-io-bool-width); }
.ptb-io-edge--string  { stroke: var(--ptb-io-string-stroke);  stroke-width: var(--ptb-io-string-width); }
.ptb-io-edge--object  { stroke: var(--ptb-io-object-stroke);  stroke-width: var(--ptb-io-object-width); }
.ptb-io-edge--unknown { stroke: var(--ptb-io-unknown-stroke); stroke-width: var(--ptb-io-unknown-width); stroke-dasharray: var(--ptb-io-unknown-dash); }

/* Make thin paths clickable */
.react-flow__edge, .react-flow__edge-path { cursor: pointer; }
.react-flow__edge-path { pointer-events: stroke; }

/* ============================================================
   NODE STYLES
   ============================================================ */

/* Keep existing positioning; only set relative to host the ring */
.ptb-node-shell {
  position: relative;            /* required for ::after ring */
  border-width: 2px;
  transition: border-color 0.15s ease, background-color 0.15s ease;
  will-change: border-color, background-color;
  z-index: 0;                    /* baseline layer */
}

/* No default shadow growth */
.react-flow__node.dragging .ptb-node-shell,
.react-flow__node.selected .ptb-node-shell { box-shadow: none; }

/* Active ring BEHIND everything inside the node (including handles) */
.react-flow__node.dragging .ptb-node-shell::after,
.react-flow__node.selected  .ptb-node-shell::after {
  content: "";
  position: absolute;
  inset: -2px;
  border: 2px solid var(--ptb-active-ring, transparent);
  border-radius: inherit;
  pointer-events: none;
  z-index: 0; /* ring behind */
}

/* Category → active ring color */
.ptb-node--command { --ptb-active-ring: var(--ptb-node-command-border-active); }
.ptb-node--address { --ptb-active-ring: var(--ptb-node-address-border-active); }
.ptb-node--number  { --ptb-active-ring: var(--ptb-node-number-border-active); }
.ptb-node--bool    { --ptb-active-ring: var(--ptb-node-bool-border-active); }
.ptb-node--string  { --ptb-active-ring: var(--ptb-node-string-border-active); }
.ptb-node--object  { --ptb-active-ring: var(--ptb-node-object-border-active); }
.ptb-node--unknown { --ptb-active-ring: var(--ptb-node-unknown-border-active); }

/* Base surfaces by category (so hover can override cleanly) */
.ptb-node--command .ptb-node-shell { 
  border-color: var(--ptb-node-command-border);
  background:   var(--ptb-node-command-bg);
}
.ptb-node--address .ptb-node-shell { 
  border-color: var(--ptb-node-address-border);
  background:   var(--ptb-node-address-bg);
}
.ptb-node--number .ptb-node-shell { 
  border-color: var(--ptb-node-number-border);
  background:   var(--ptb-node-number-bg);
}
.ptb-node--bool .ptb-node-shell { 
  border-color: var(--ptb-node-bool-border);
  background:   var(--ptb-node-bool-bg);
}
.ptb-node--string .ptb-node-shell { 
  border-color: var(--ptb-node-string-border);
  background:   var(--ptb-node-string-bg);
}
.ptb-node--object .ptb-node-shell { 
  border-color: var(--ptb-node-object-border);
  background:   var(--ptb-node-object-bg);
}
.ptb-node--unknown .ptb-node-shell { 
  border-color: var(--ptb-node-unknown-border);
  background:   var(--ptb-node-unknown-bg);
}

/* Hover effects */
.react-flow__node:has(.ptb-node--command):hover .ptb-node-shell {
  border-color: var(--ptb-node-command-border-hover);
  background:   var(--ptb-node-command-bg-hover);
}
.react-flow__node:has(.ptb-node--address):hover .ptb-node-shell {
  border-color: var(--ptb-node-address-border-hover);
  background:   var(--ptb-node-address-bg-hover);
}
.react-flow__node:has(.ptb-node--number):hover .ptb-node-shell {
  border-color: var(--ptb-node-number-border-hover);
  background:   var(--ptb-node-number-bg-hover);
}
.react-flow__node:has(.ptb-node--bool):hover .ptb-node-shell {
  border-color: var(--ptb-node-bool-border-hover);
  background:   var(--ptb-node-bool-bg-hover);
}
.react-flow__node:has(.ptb-node--string):hover .ptb-node-shell {
  border-color: var(--ptb-node-string-border-hover);
  background:   var(--ptb-node-string-bg-hover);
}
.react-flow__node:has(.ptb-node--object):hover .ptb-node-shell {
  border-color: var(--ptb-node-object-border-hover);
  background:   var(--ptb-node-object-bg-hover);
}
.react-flow__node:has(.ptb-node--unknown):hover .ptb-node-shell {
  border-color: var(--ptb-node-unknown-border-hover);
  background:   var(--ptb-node-unknown-bg-hover);
}

/* ============================================================
   HANDLE STYLES
   ============================================================ */

.ptb-handle {
  width: 12px;
  height: 12px;
  border: 2px solid transparent;
  background: #ccc; /* fallback */
  box-sizing: border-box;
  box-shadow: 0 0 0 1px rgba(0,0,0,.15);

  /* keep stacking above node shell/ring */
  z-index: 2;
  pointer-events: all;
}

.ptb-handle--io   { /* as-is */ }
.ptb-handle--flow { width: 14px; height: 14px; }

/* Direction hooks (optional) */
.ptb-handle--in  { /* no-op */ }
.ptb-handle--out { /* no-op */ }

/* Cardinality: single=circle, array=rounded square, vector=diamond */
.ptb-handle--single { border-radius: 9999px; }
.ptb-handle--array  { border-radius: 4px; }
.ptb-handle--vector { transform: rotate(45deg); border-radius: 2px; }
.ptb-handle--vector.ptb-handle--flow { width: 16px; height: 16px; }

/* IO category colors */
.ptb-handle--address { background: var(--ptb-io-address-stroke); }
.ptb-handle--number  { background: var(--ptb-io-number-stroke);  }
.ptb-handle--bool    { background: var(--ptb-io-bool-stroke);    }
.ptb-handle--string  { background: var(--ptb-io-string-stroke);  }
.ptb-handle--object  { background: var(--ptb-io-object-stroke);  }
.ptb-handle--unknown { background: var(--ptb-io-unknown-stroke); }

/* Flow handle color = command outline color (Start/End unified as Command) */
.react-flow__node:has(.ptb-node--command) .ptb-handle--flow {
  background:   var(--ptb-node-command-border);
  border-color: var(--ptb-node-command-border);
}

/* Subtle affordance */
.react-flow__handle:hover,
.ptb-handle:hover { filter: brightness(1.05); }